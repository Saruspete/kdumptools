# vim: ts=4 ft=sh

# Define some vars to be defined
declare PKG_CRASH=""
declare PKG_KDUMP=""
declare PKG_KEXEC=""

#
# OS Family
#
function os_getid {
	declare -l fam=""
	declare -l fla=""
	declare -l tmp=""

	# Common description
	for f in redhat gentoo SuSE os system; do
		[[ -e "/etc/${f}-release" ]] && {
			tmp="$(head -n1 /etc/${f}-release)"
			fam="$f"
			fla="${tmp%% *}"
			break
		}
	done

	# Debian based. No standard way for the flavour on this
	[[ -e "/etc/debian_version" ]] && {
		fam="debian"
		fla="debian"
	}
	# LSB standard
	[[ -e "/etc/lsb-release" ]] && {
		tmp="$(grep "^DISTRIB_ID=" "/etc/lsb-release")"
		[[ -n "$tmp" ]] && fla="${tmp#*=}"
	}

	echo "${fam}-${fla}"
}

function os_getdbginfo   { _lib_replaceme; }

#
# Package management
#
function os_pkgextract   { _lib_replaceme; }
function os_pkginstall   { _lib_replaceme; }
function os_pkginstalled { _lib_replaceme; }
function os_pkgremove    { _lib_replaceme; }
function os_pkgprovides  { _lib_replaceme; }

function os_bininstall  {
	declare pkgs=""
	for bin in "$@"; do
		# TODO: Implement it
		pkgs="$pkgs $(os_pkgprovides "$bin")"
	done
	os_pkginstall "$pkgs"
}


#
# Init flavours and management
#
function os_initsystemd { grep systemd /proc/1/comm >/dev/null 2>&1 ; }
function os_initupstart { grep upstart /proc/1/comm >/dev/null 2>&1 ; }
function os_initopenrc  { [[ -d "/etc/runlevels/boot" ]]; }
function os_initsysv    { [[ -d "/etc/rc.d" ]]; }
function os_runlevel    { who -r|grep -Po 'run-level [0-9]'|grep -Po '[0-9]'; }

function os_svcexists   { _lib_replaceme; }
function os_svcenable   { _lib_replaceme; }
function os_svcdisable  { _lib_replaceme; }
function os_svcenabled  { _lib_replaceme; }
function os_svcdisabled { _lib_replaceme; }
function os_svcstart    { service $1 start; }
function os_svcstop     { service $1 stop; }

if os_initsystemd; then
	function os_svcexists   { systemctl list-units --all | grep " $1.service" >/dev/null ; }
	function os_svcenable   { systemctl enable "$1"  >/dev/null 2>&1 ; }
	function os_svcdisable  { systemctl disable "$1" >/dev/null 2>&1 ; }
	function os_svcenabled  { systemctl is-enabled "$1" >/dev/null 2>&1 ; }
	function os_svcdisabled { systemctl is-disabled "$1" >/dev/null 2>&1 ; }

elif os_initsysv; then
	function os_svcexists   { [[ -s "/etc/init.d/$1" ]] ; }
	function os_svcenable   { chkconfig "$1" on  >/dev/null 2>&1 ; }
	function os_svcdisable  { chkconfig "$1" off >/dev/null 2>&1 ; }
	function os_svcenabled  { chkconfig --list "$1" 2>/dev/null | grep "$(os_runlevel):on" >/dev/null ; }
	function os_svcdisabled { chkconfig --list "$1" 2>/dev/null | grep "$(os_runlevel):off" >/dev/null ; }

elif os_initopenrc; then
	function os_svcexists   { [[ -s "/etc/init.d/$1" ]] ; }
	function os_svcenable   { rc-update "$1" add boot >/dev/null 2>&1 ; }
	function os_svcdisable  { rc-update "$1" del boot >/dev/null 2>&1 ; }
	function os_svcenabled  { rc-update show boot 2>/dev/null | grep " $1 " >/dev/null ; }
	function os_svcdisabled { rc-update show boot 2>/dev/null | grep " $1 " >/dev/null ; }

# TODO: Please somebody using ubuntu do it...
elif os_initupstart; then
	:

else
	logwarning "Unable to detect your init system type"
fi


# Load the OS related subs
declare os_id="$(os_getid)"
declare os_family="${os_id%/*}"
declare os_flavor="${os_id#*/}"
_lib_load "os.${os_family}"

